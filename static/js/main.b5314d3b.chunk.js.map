{"version":3,"sources":["components/Ingredients/IngredientButton/IngredientButton.css","logo.svg","App.css","assets/images/farfalle.png","assets/images/penne.png","assets/images/shell.png","assets/images/elbow.png","containers/Layout/Layout.js","components/Ingredients/IngredientButton/IngredientButton.js","components/Ingredients/Pasta/Pasta.js","containers/MacBuilder/MacBuilder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Layout","this","props","children","Component","FARFALLE_ICON","require","PENNE_ICON","SHELL_ICON","ELBOW_ICON","IngredientButton","img","type","className","classes","onClick","clicked","src","alt","Pasta","transformedIngredients","map","shapeKey","key","console","log","MacBuilder","state","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,iBAAmB,4CAA4C,QAAU,mCAAmC,OAAS,oC,uECDvID,EAAOC,QAAU,IAA0B,kC,gBCC3CD,EAAOC,QAAU,CAAC,IAAM,kBAAkB,WAAW,uBAAuB,aAAa,yBAAyB,WAAW,yB,gBCD7HD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,+HCa5BC,E,iLATX,OACE,6BACGC,KAAKC,MAAMC,c,GAJCC,a,gBCAfC,EAAgBC,EAAQ,IACxBC,EAAaD,EAAQ,IACrBE,EAAaF,EAAQ,IACrBG,EAAaH,EAAQ,IAgCZI,E,iLA5BX,IAAIC,EAAM,KACV,OAAQV,KAAKC,MAAMU,MACjB,IAAM,WACJD,EAAMN,EACN,MACF,IAAM,QACJM,EAAMJ,EACN,MACF,IAAM,QACJI,EAAMH,EACN,MACF,IAAM,QACJG,EAAMF,EAKV,OACE,4BAAQI,UAAWC,IAAQJ,iBACzBK,QAASd,KAAKC,MAAMc,SAEpB,yBAAKC,IAAKN,EAAKO,IAAKjB,KAAKC,MAAMU,OAC9BX,KAAKC,MAAMC,c,GAxBWC,aC6BhBe,E,iLA3BX,IAEIC,EAFW,CAAC,WAAY,QAAS,QAAS,SAEVC,KAAI,SAAAC,GACtC,OAAO,kBAAC,EAAD,CAAkBC,IAAKD,EAAUV,KAAMU,GAAWA,MAc3D,OAXAE,QAAQC,IAAIL,GAYV,kDAAwBA,O,GAvBVhB,aCeLsB,E,2MAZbC,MAAQ,G,wEAGN,OACE,qCACE,kBAAC,EAAD,W,GAPiBvB,aCSVwB,MARf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b5314d3b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"IngredientButton\":\"IngredientButton__IngredientButton__wUQxE\",\"Success\":\"IngredientButton__Success__2qtCm\",\"Danger\":\"IngredientButton__Danger__24xhE\"};","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App__App__1o-Fp\",\"App-logo\":\"App__App-logo__3JCPt\",\"App-header\":\"App__App-header__3iH8L\",\"App-link\":\"App__App-link__13fTZ\"};","module.exports = __webpack_public_path__ + \"static/media/farfalle.ee593256.png\";","module.exports = __webpack_public_path__ + \"static/media/penne.2556b175.png\";","module.exports = __webpack_public_path__ + \"static/media/shell.31004ebc.png\";","module.exports = __webpack_public_path__ + \"static/media/elbow.e3d350e1.png\";","import React, { Component } from 'react';\n\nclass Layout extends Component {\n  render () {\n    return (\n      <div>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\n\nexport default Layout; ","import React, { Component } from 'react';\nimport classes from './IngredientButton.css';\nconst FARFALLE_ICON = require('../../../assets/images/farfalle.png');\nconst PENNE_ICON = require('../../../assets/images/penne.png');\nconst SHELL_ICON = require('../../../assets/images/shell.png');\nconst ELBOW_ICON = require('../../../assets/images/elbow.png');\n\nclass IngredientButton extends Component {\n  render () {\n    let img = null;\n    switch (this.props.type){\n      case ('farfalle'):\n        img = FARFALLE_ICON;\n        break;\n      case ('penne'):\n        img = PENNE_ICON;\n        break;\n      case ('shell'):\n        img = SHELL_ICON;\n        break;\n      case ('elbow'):\n        img = ELBOW_ICON;\n        break;\n      default:\n        break;\n    }\n    return (\n      <button className={classes.IngredientButton}\n        onClick={this.props.clicked}\n      >\n        <img src={img} alt={this.props.type}></img>\n        {this.props.children}\n      </button>\n    )\n  }\n}\n\nexport default IngredientButton;","import React, { Component } from 'react';\nimport IngredientButton from '../IngredientButton/IngredientButton';\n\n\nclass Pasta extends Component {\n\n  \n\n  render () {\n    const shapes = ['farfalle', 'penne', 'shell', 'elbow'];\n\n    let transformedIngredients = shapes.map(shapeKey =>{\n      return <IngredientButton key={shapeKey} type={shapeKey}>{shapeKey}</IngredientButton>;\n    });\n    \n    console.log(transformedIngredients);\n    // .map(igKey => {\n    //   return [...Array(props.ingredients[igKey])]\n    //   .map((_, i) => {\n    //     return <IngredientButton key={igKey + i} type={igKey}/>;\n    //   });\n    // }).reduce((arr, el) => {\n    //   return arr.concat(el);\n    // }, []);\n    // console.log(transformedIngredients);\n\n    return (\n      <div>Choose Your Pasta {transformedIngredients}</div>\n      \n      \n    )\n  }\n\n}\n\n\nexport default Pasta;","import React, { Component } from 'react';\nimport Pasta from '../../components/Ingredients/Pasta/Pasta';\n\n\n\nclass MacBuilder extends Component {\n\n  state = {}\n\n  render () {\n    return (\n      <div>Hello\n        <Pasta />\n      </div>\n    )\n  }\n}\n\n\nexport default MacBuilder;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Layout from './containers/Layout/Layout';\nimport MacBuilder from './containers/MacBuilder/MacBuilder';\n\nfunction App() {\n  return (\n    <Layout>\n      <MacBuilder />\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}